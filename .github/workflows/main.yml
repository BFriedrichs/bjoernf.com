name: CI

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-web:
    runs-on: ubuntu-latest
    outputs:
      hash: ${{ steps.web-hash.outputs.hash }}
    steps:
      - uses: actions/checkout@v2

      - name: Set web hash
        id: web-hash
        run: |
          echo '::set-output name=hash::${{ hashFiles('web/**/*.*') }}'

      - name: Cache web build
        id: cache-build
        uses: actions/cache@v3
        with:
          path: web/dist
          key: hashbuild-${{ steps.web-hash.outputs.hash }}

      - uses: actions/setup-node@v3
        if: steps.cache-build.outputs.cache-hit != 'true'
        with:
          node-version: 16
          cache: 'yarn'
          cache-dependency-path: web/yarn.lock

      - name: Install
        if: steps.cache-build.outputs.cache-hit != 'true'
        working-directory: ./web
        run: yarn install

      - name: Build
        if: steps.cache-build.outputs.cache-hit != 'true'
        working-directory: ./web
        run: |
          yarn build:client
          yarn build:server

  build-images:
    needs: build-web
    runs-on: ubuntu-latest
    strategy:
      matrix:
        name: [api, render-server]
    steps:
      - uses: actions/checkout@v2

      - name: Cache web build
        if: ${{ matrix.name }} == 'render-server'
        id: cache-build
        uses: actions/cache@v3
        with:
          path: web/dist
          key: hashbuild-${{ needs.build-web.outputs.hash }}

      - name: Copy web build
        if: ${{ matrix.name }} == 'render-server'
        run: cp -r web/dist render-server/dist

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        id: cache-layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache-${{ matrix.name }}
          key: ${{ runner.os }}-buildx-${{ matrix.name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.name }}-

      - name: Create images folder
        run: mkdir -p images

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./${{ matrix.name }}
          tags: bjornf-${{ matrix.name }}:latest
          push: false
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache-${{ matrix.name }}
          cache-to: type=local,dest=/tmp/.buildx-cache-new-${{ matrix.name }},mode=max
          outputs: type=docker,dest=images/bjornf-${{ matrix.name }}.tar

      - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896 name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache-${{ matrix.name }}
          mv /tmp/.buildx-cache-new-${{ matrix.name }} /tmp/.buildx-cache-${{ matrix.name }}

      - uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.name }}-image
          path: images/bjornf-${{ matrix.name }}.tar

  restart-server:
    needs: build-images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Create folder
        run: |
          mkdir -p ./images

      - name: Download all images
        uses: actions/download-artifact@v2
        with:
          path: images/

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          known_hosts: 'placeholder'

      - name: Adding Known Hosts
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Copy files
        run: |
          rsync ./docker/prod-config.yml ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USERNAME }}/bjornf.dev/docker/prod-config.yml
          rsync ./docker-compose.yml ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USERNAME }}/bjornf.dev/docker-compose.yml
          rsync -avz images/ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USERNAME }}/bjornf.dev/images

      - name: Load images
        uses: appleboy/ssh-action@master
        env:
          IMAGES: api render-server
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          envs: IMAGES
          key: ${{ secrets.SSH_KEY }}
          script: |
            for IMAGE in $IMAGES
            do
              sudo docker load -i ~/bjornf.dev/images/$IMAGE-image/bjornf-$IMAGE.tar
            done

      - name: Restart server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ~/bjornf.dev
            cat >release.yml <<EOL
            services:
              api:
                environment:
                  API_JWT_SECRET: ${{ secrets.JWT_SECRET }}
                  API_MONGO_URL: ${{ secrets.MONGO_URL }}
                  API_MONGO_USER_PASSWORD: ${{ secrets.MONGO_USER_PASSWORD }}
                  API_AWS_ACCESSKEY: ${{ secrets.AWS_ACCESS_KEY }}
                  API_AWS_SECRETKEY: ${{ secrets.AWS_SECRET_KEY }}
              analytics:
                environment:
                  ACKEE_MONGODB: ${{ secrets.MONGO_URL }}
                  ACKEE_USERNAME: ${{ secrets.ACKEE_USER }}
                  ACKEE_PASSWORD: ${{ secrets.ACKEE_PASSWORD }}
            EOL

            sudo docker-compose -f docker-compose.yml -f docker/prod-config.yml -f release.yml down
            sudo docker-compose -f docker-compose.yml -f docker/prod-config.yml -f release.yml up -V -d
            sudo docker system prune -f

  s3-upload:
    needs:
      - restart-server
      - build-web
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Cache web build
        id: cache-build
        uses: actions/cache@v3
        with:
          path: web/dist
          key: hashbuild-${{ needs.build-web.outputs.hash }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: eu-west-2

      - name: Upload static files to AWS
        run: |
          aws s3 cp --recursive web/dist/browser s3://bjornf.dev-public/static
          aws s3 sync --delete web/dist/browser s3://bjornf.dev-public/static

      - name: Invalidate cache from CF
        run: |
          aws cloudfront create-invalidation \
            --distribution-id E16OOQSQGDXBD \
            --paths "/*" "/assets/*" "/images/*" "/rss" "/rss*"

  cleanup:
    needs:
      - restart-server
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: geekyeggo/delete-artifact@v2
        if: always()
        with:
          name: |
            *-image

