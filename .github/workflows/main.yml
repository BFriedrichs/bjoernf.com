name: CI

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-web:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Npm install
        working-directory: ./web
        run: |
          npm install

      - name: Build
        working-directory: ./web
        env:
          REACT_APP_API_URL: https://bjornf.dev
          PUBLIC_URL: https://static.bjornf.dev
        run: |
          node scripts/build.js &
          PID_WEB=$!

          node scripts/build-node.js &
          PID_NODE=$!

          wait $PID_WEB
          wait $PID_NODE

      - uses: actions/upload-artifact@v1
        with:
          name: web-build
          path: web/build/

  build-images:
    needs: build-web
    runs-on: ubuntu-latest
    strategy:
      matrix:
        name: [api, render-server, static, image-server]

    steps:
      - uses: actions/checkout@v2

      - name: Create folder
        run: |
          mkdir -p ./build

      - uses: actions/download-artifact@v2
        with:
          name: web-build
          path: build/

      - name: Move builds (api)
        if: matrix.name == 'api'
        run: |
          mkdir -p ./api/blogapi/dist/public
          mkdir -p ./api/blogapi/dist/images
          rsync -avz ./build/public/ ./api/blogapi/dist/public/
          rsync -avz ./build/images/ ./api/blogapi/dist/images/

      - name: Move builds (render-server)
        if: matrix.name == 'render-server'
        run: |
          mkdir -p ./render-server/dist/static
          rsync -avz ./build/static/ ./render-server/dist/static/

      - name: Move builds (static)
        if: matrix.name == 'static'
        run: |
          mkdir -p ./static/static
          rsync -avz ./build/static/ ./static/data/

        - name: Move builds (image-server)
          if: matrix.name == 'image-server'
          run: |
            mkdir -p ./image-server/images
            rsync -avz ./build/images/ ./static/images/

      - name: Build image
        working-directory: ./${{ matrix.name }}
        run: |
          docker build -t bjornf-${{ matrix.name }} .

          mkdir -p ../images
          docker save -o ../images/${{matrix.name}}.tar bjornf-${{matrix.name}}

      - uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.name }}-image
          path: images/${{matrix.name}}.tar

  restart-server:
    needs: build-images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Create folder
        run: |
          mkdir -p ./images

      - name: Remove web build artifact
        uses: geekyeggo/delete-artifact@1-glob-support
        with:
          useGlob: false
          name: web-build

      - name: Download all images
        uses: actions/download-artifact@v2
        with:
          path: images/

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          known_hosts: 'placeholder'

      - name: Adding Known Hosts
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Take down server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            mkdir -p ~/bjornf.dev
            cd ~/bjornf.dev
            sudo docker-compose down || true
            sudo docker-compose rm -f || true

      - name: Copy files
        run: |
          rsync ./docker-compose.yml ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USERNAME }}/bjornf.dev/docker-compose.yml
          rsync -avz images/ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USERNAME }}/bjornf.dev/images

      - name: Load images
        uses: appleboy/ssh-action@master
        env:
          IMAGES: api render-server static image-server
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          envs: IMAGES
          key: ${{ secrets.SSH_KEY }}
          script: |
            for IMAGE in $IMAGES
            do
              sudo docker load -i ~/bjornf.dev/images/$IMAGE-image/$IMAGE.tar
            done

      - name: Restart server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ~/bjornf.dev
            cat >prod.yml <<EOL
            services:
              mongo:
                volumes:
                  - /home/${{ secrets.SSH_USERNAME }}/bjornf.dev/mongo-data:/data/db
              api:
                environment:
                  VIRTUAL_HOST: ${{ secrets.SSH_HOST }}
                  VIRTUAL_PORT: 80
                  LETSENCRYPT_HOST: ${{ secrets.SSH_HOST }}
                  API_CONNECTION_PORT: 80
                  API_CONNECTION_WEBHOST: https://${{ secrets.SSH_HOST }}
                  API_CONNECTION_IMAGEHOST: https://images.${{ secrets.SSH_HOST }}
                  API_JWT_SECRET: ${{ secrets.JWT_SECRET }}
                  API_MONGO_USER_PASSWORD: ${{ secrets.MONGO_USER_PASSWORD }}
                  API_DEV: "false"
                expose:
                  - 80
                volumes:
                  - /home/${{ secrets.SSH_USERNAME }}/bjornf.dev/api-uploads:/api/blogapi/dist/uploads
              static:
                environment:
                  VIRTUAL_HOST: static.${{ secrets.SSH_HOST }}
                  VIRTUAL_PORT: 80
                  LETSENCRYPT_HOST: static.${{ secrets.SSH_HOST }}
                expose:
                  - 80
              image-server:
                environment:
                  VIRTUAL_HOST: images.${{ secrets.SSH_HOST }}
                  VIRTUAL_PORT: 80
                  LETSENCRYPT_HOST: images.${{ secrets.SSH_HOST }}
                expose:
                  - 80
            EOL

            sudo docker-compose -f docker-compose.yml -f prod.yml up -d
            sudo docker system prune -f

  cleanup:
    needs: restart-server
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: geekyeggo/delete-artifact@1-glob-support
        if: always()
        with:
          useGlob: true
          name: |
            *-image
      - uses: geekyeggo/delete-artifact@1-glob-support
        if: always()
        with:
          useGlob: false
          name: web-build
