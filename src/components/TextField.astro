---
import Icon from "./Icon.astro";

interface Props {
  id: string;
  label?: string;
  icon?: string;
  value?: string;
  suggestions?: string[];
}

const { label, id, icon, value, suggestions } = Astro.props;
---

<div
  class:list={["input-wrapper", icon && "with-adornment", value && "has-value"]}
>
  {label ? <label class="placeholder">{label}</label> : null}
  <input
    autocomplete="off"
    id={id}
    class="input"
    value={value ?? ""}
    list={suggestions ? `${id}-suggestions` : undefined}
  />
  {
    suggestions ? (
      <datalist id={`${id}-suggestions`}>
        {suggestions.map((suggestion) => (
          <option>{suggestion}</option>
        ))}
      </datalist>
    ) : null
  }
  {
    icon ? (
      <div class="adornment">
        <Icon icon={icon} />
      </div>
    ) : null
  }
  <fieldset>
    <legend>
      <span>{label}_</span>
    </legend>
  </fieldset>
</div>

<script>
  const inputs = document.querySelectorAll("input.input");
  inputs.forEach((element) => {
    element?.addEventListener("focus", (event) => {
      const target = event.target as HTMLInputElement;
      target.parentElement?.classList.add("focused");
    });
    element?.addEventListener("blur", (event) => {
      const target = event.target as HTMLInputElement;
      target.parentElement?.classList.remove("focused");
    });
    element?.addEventListener("input", (event) => {
      const target = event.target as HTMLInputElement;
      if (target?.value !== "") {
        target.parentElement?.classList.add("has-value");
      } else {
        target.parentElement?.classList.remove("has-value");
      }
    });
  });
</script>

<style>
  .input-wrapper {
    background: #fafafa;
    color: rgba(0, 0, 0, 0.87);
    box-sizing: border-box;
    position: relative;
    cursor: text;
    display: inline-flex;
    align-items: center;
    position: relative;
    border-radius: 4px;

    &.with-adornment input {
      padding: 11.5px 0px 11.5px 14px;
    }

    &:hover {
      fieldset {
        border-width: 1px;
        border-color: var(--tw-color-primary);
      }
    }

    &.has-value {
      &.focused,
      &:hover {
        .placeholder {
          color: var(--tw-color-primary);
        }
      }

      fieldset legend span {
        display: inline-block;
      }

      .placeholder {
        transform: translate(14px, -9px) scale(0.75);
      }
    }

    &.focused {
      fieldset {
        border-width: 2px;
        border-color: var(--tw-color-primary);
      }
    }
  }
  input {
    border: 0px;
    box-sizing: content-box;
    background: none;
    height: 1.4375em;
    margin: 0px;
    -webkit-tap-highlight-color: transparent;
    display: block;
    min-width: 0px;
    width: 100%;
    outline: 0;
    padding: 11.5px 14px;
  }

  .placeholder {
    color: rgba(0, 0, 0, 0.4);
    font-size: 1rem;
    line-height: 1.4375em;
    letter-spacing: 0.00938em;
    padding: 0;
    display: block;
    transform-origin: top left;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: calc(100% - 24px);
    position: absolute;
    left: 0;
    top: 0;
    -webkit-transition:
      color 200ms cubic-bezier(0, 0, 0.2, 1) 0ms,
      -webkit-transform 200ms cubic-bezier(0, 0, 0.2, 1) 0ms,
      max-width 200ms cubic-bezier(0, 0, 0.2, 1) 0ms;
    transition:
      color 200ms cubic-bezier(0, 0, 0.2, 1) 0ms,
      transform 200ms cubic-bezier(0, 0, 0.2, 1) 0ms,
      max-width 200ms cubic-bezier(0, 0, 0.2, 1) 0ms;
    z-index: 1;
    pointer-events: none;
    transform: translate(14px, 13px) scale(1);
  }

  fieldset {
    text-align: left;
    position: absolute;
    bottom: 0;
    right: 0;
    top: -5px;
    left: 0;
    margin: 0;
    padding: 0 8px;
    pointer-events: none;
    border-radius: inherit;
    border-style: solid;
    border-width: 0.5px;
    overflow: hidden;
    min-width: 0%;
    border-color: gray;

    legend {
      float: unset;
      overflow: hidden;
      display: block;
      width: auto;
      padding: 0;
      height: 11px;
      font-size: 0.75em;
      visibility: hidden;
      max-width: 0.01px;
      transition: max-width 50ms cubic-bezier(0, 0, 0.2, 1) 50ms;
      white-space: nowrap;

      max-width: 100%;
      transition: max-width 50ms cubic-bezier(0, 0, 0.2, 1) 100ms;

      span {
        font-size: 14px;
        opacity: 0;
        visibility: hidden;
        display: none;
      }
    }
  }

  .adornment {
    display: flex;
    height: 0.01em;
    max-height: 2em;
    -webkit-box-align: center;
    align-items: center;
    white-space: nowrap;
    color: rgba(0, 0, 0, 0.54);
    margin-right: 8px;
  }
</style>
