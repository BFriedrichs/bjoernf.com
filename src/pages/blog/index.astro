---
import SearchIcon from "@/images/icons/Search.svg?raw";
import { getDb } from "@/utils/database";
import PostItem from "@/components/PostItem.astro";
import Layout from "@/layouts/Layout.astro";
import type { Filter } from "mongodb";
import type { Post } from "@/utils/models";
import TextField from "@/components/TextField.astro";
import Tag from "@/components/Tag.astro";
import Chip from "@/components/Chip.astro";

const query: Filter<Post> = { published: { $exists: true } };
const tag = Astro.url.searchParams.get("tag");
if (tag) {
  query["published.tags"] = tag;
}

const database = await getDb();
const posts = await database
  .posts()
  .find(query, { projection: { published: 1, createdAt: 1 } })
  .sort({ "published.publishedAt": -1 });

const allPosts = await database
  .posts()
  .find({ published: { $exists: true } })
  .toArray();
const uniqueTags = new Set<string>();
for (const post of allPosts) {
  for (const tag of post.published?.tags ?? []) {
    uniqueTags.add(tag);
  }
}
---

<Layout title="Blog">
  <div class="flex flex-col">
    <div class="flex justify-end gap-2">
      {
        Array.from(uniqueTags).map((tagName) => (
          <Tag
            reset={tag === tagName}
            deletable={tag === tagName}
            variant={tag === tagName ? "contained" : "outlined"}
            name={tagName}
          />
        ))
      }
    </div>
    <div class="flex flex-col">
      {posts.map((p) => <PostItem post={p} />)}
    </div>
  </div>
</Layout>
